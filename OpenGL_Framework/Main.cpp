/************
* The window is first setup using the glfw library.
* This platform-independent library maps the OS window interface
* onto the glfw specification
*
* The glew library allows us to use the OpenGL library
* However the OpenGL lib file is already on the computer
* provided by the manufacturer of the graphics card
*
* All OpenGL objects have a unique ID (of type GLuint)
* The ID and OpenGL object are generated by a function
* however the actual OpenGL object is gernerally hidden
* from the user, and accessed only through its ID
*
************/


#include <iostream>
#include <exception>
#include <thread>
#include <chrono>

#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "MainWindow.h"
#include "DetailedException.h"
#include "Texture.h"
#include "Game.h"
#include "Mouse.h"
#include "Keyboard.h"

// The MAIN function, from here we start the application and run the game loop
int main()
{
	MainWindow& window = *MainWindow::getWindow();
	window.init(800, 600);

	Keyboard& kbd = *Keyboard::getKeyboard();
	Mouse& mouse = *Mouse::getMouse();

	Game game(kbd, mouse);

	try
	{
		game.setup();

		// main loop
		while (window.running())
		{
			mouse.update();
			window.beginFrame();
			game.draw();
			window.endFrame();
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
		}
	}
	catch (DetailedException& e)
	{
		std::cerr << e.what() << std::endl;
		std::cout << e.details() << std::endl;
	}
	catch (std::exception& e)
	{
		std::cerr << e.what() << std::endl;
	}

	return 0;
}